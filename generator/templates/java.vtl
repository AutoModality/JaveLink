##
#macro(isSigned $type)
#if(!$type.startsWith("u"))true #else false#end
#end
##
#macro(getJavaType $type)
#if($type.startsWith("uint32") || $type.contains("64_"))
long##
#elseif($type.startsWith("float"))
float## 
#elseif($type.startsWith("double"))
double##
#elseif($type.startsWith("char"))	
char##
#else
int##
#end
#end
##
#macro(toTitleCase $string) 
$string.substring(0, 1).toUpperCase()$string.substring(1, $string.length())##
#end
##
package com.automodality.message;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class MAVLink {
	
	@SuppressWarnings("unused")
	private static final int PROTOCOL_VERSION = $version;
	private static final short PACKET_START_SIGN = 0xFE; //v1.0: 0xFE; v0.9: 0x55
	private static final int HEADER_LENGTH = 8; // Overhead size
	
	// Mavlink constants
	
#foreach($enum in $enums)
	/*
	 * $enum.description
	 */
#foreach($value in $enum.values)
	public static final int $value.name = $value.value; // $value.description
#end	
 
#end
	/*
	 * Message IDs
	 */
#foreach($message in $message_list)
	public static final short MSG_ID_$message.name = $message.id;
#end

	public static abstract class Message extends AMMAVLink {
		
		private static final long serialVersionUID = 1L;
		protected String msgName;
		
		public static Message decodeMessage(byte[] bytes) {
			short msg = (short)(bytes[5] & 0xFF);
		
			switch(msg) {
#foreach($message in $message_list)
					case MSG_ID_$message.name: 
						return new MSG_$message.name ().decode(bytes);
#end
					default: throw new IllegalArgumentException("Message with id=" + msg + " is not supported.");
			}
		}
	
		protected Message(short msg, short lngth, String msgName)
		{
			this.msg = msg;			
			this.lngth = lngth;
			this.msgName = msgName;
		}
		
		protected Message(byte[] bytes, short msg, short lngth, String msgName) {
			this.msg = msg;
			this.lngth = lngth;
			this.msgName = msgName;
			decode(bytes);
		}
		
		protected Message(short sys, short comp, short lngth, String msgName) {
			this.sys = sys;
			this.lngth = lngth;
			this.msgName = msgName;
			this.comp = Component.getNameValueOf(comp);
		}
	
		public abstract int getCRCExtra();
		
		public String getMsgName()
		{
			return msgName;
		}
		
		protected abstract ByteBuffer decodePayload(ByteBuffer buffer);
		
		protected Message decode(byte[] bytes)
		{
			ByteBuffer buffer = ByteBuffer.wrap(bytes);
			buffer.order(ByteOrder.LITTLE_ENDIAN);
			short startSign = (short)(buffer.get() & 0xFF);
			
			if(startSign != PACKET_START_SIGN) {
				throw new IllegalStateException("Unsupported protocol. Excepted: " + 
					PACKET_START_SIGN + " got: " + startSign);
			}
			
			this.lngth = (short)(buffer.get() & 0xFF);
			// TODO: validate against known length for given msgID
			
			this.sqnc = (short)(buffer.get() & 0xFF);
			this.sys = (short)(buffer.get() & 0xFF);
			this.comp = Component.getNameValueOf(buffer.get() & 0xFF);
			
			short tmp = (short)(buffer.get() & 0xFF); // messageID not used
			if(tmp != getMsg()) {
				throw new IllegalArgumentException("Invalid message id. Expected: " + 
					getMsg() + " got: " + msg);
			 }
			
			decodePayload(buffer);
			// TODO: CRC		
			
			return this;	
		}

		public abstract ByteBuffer encodePayload(ByteBuffer buffer);
		
		public byte[] encode() {
			ByteBuffer buffer = ByteBuffer.allocate(HEADER_LENGTH+getLngth());
			buffer.order(ByteOrder.LITTLE_ENDIAN);
			
			this.setSqnc((short)0x4E); // TMP
			
			buffer.put((byte)(PACKET_START_SIGN & 0xFF));
			buffer.put((byte)(getLngth() & 0xFF));
			buffer.put((byte)(getSqnc() & 0xFF));//sequence
			buffer.put((byte)(getSys() & 0xFF));
			buffer.put((byte)(Component.getIDValueOf(getComp()) & 0xFF));
			buffer.put((byte)(getMsg() & 0xFF));
			encodePayload(buffer);
			
			// Calculate CRC
			buffer.put((byte)(getCRCExtra() & 0xFF));
			
			byte[] bytes = new byte[HEADER_LENGTH+getLngth()];
			buffer.rewind();
			buffer.get(bytes);
			
			int crc = getCRC(bytes, 1, bytes.length-1);
			bytes[bytes.length-2] = (byte)((crc>>8)&0xFF);
			bytes[bytes.length-1] = (byte)((crc)&0xFF);

			return bytes;
		}
		
		public static byte[] encode(short lngth, short sqnc, short sys, short comp, short msg, byte[] payload, int crcExtra) {
			ByteBuffer buffer = ByteBuffer.allocate(HEADER_LENGTH+lngth);
			buffer.order(ByteOrder.LITTLE_ENDIAN);
			
			buffer.put((byte)(PACKET_START_SIGN & 0xFF));
			buffer.put((byte)(lngth & 0xFF));
			buffer.put((byte)(sqnc & 0xFF));//sequence
			buffer.put((byte)(sys & 0xFF));
			buffer.put((byte)(comp & 0xFF));
			buffer.put((byte)(msg & 0xFF));
			for(byte b: payload)
			{
				buffer.put(b);
			}	
			
			// Calculate CRC
			buffer.put((byte)(crcExtra & 0xFF));
			byte[] bytes = new byte[HEADER_LENGTH+lngth];
			buffer.rewind();
			buffer.get(bytes);
			int crc = getCRC(bytes, 1, bytes.length-1);
			bytes[bytes.length-2] = (byte)((crc>>8)&0xFF);
			bytes[bytes.length-1] = (byte)((crc)&0xFF);

			return bytes;
		}

		private static int getCRC(byte[] bytes, int offset, int length) {
			int crc = 0xffff;
			
			for(int c=offset; c<length; ++c) {
				int tmp;
				int data = bytes[c] & 0xff;	//cast because we want an unsigned type
				tmp = data ^ (crc & 0xff);
				tmp ^= (tmp << 4) & 0xff;
				crc = ((crc >> 8) & 0xff) ^ (tmp << 8) ^ (tmp << 3)
						^ ((tmp >> 4) & 0xf);
			}

			return (crc&0xFF) << 8 | (crc>>8&0x00FF);
		}
	}
	
#foreach($message in $message_list)
#if($message.description)
	/*
	 * $message.description
	 */
#end
	public static class MSG_$message.name extends Message {
	
	private static final long serialVersionUID = 1L;
#foreach( $field in $message.fields )
		private #getJavaType($field.type)#if($field.array)[]#end $field.name#if($field.array) = new #getJavaType($field.type)[$field.length]#end; // $field.description
#end
	
		public MSG_$message.name () {
			super(MSG_ID_$message.name, (short)$message.length, "$message.name");
		}

		public MSG_$message.name (byte[] bytes) {
			super(bytes, MSG_ID_$message.name, (short)$message.length, "$message.name");
		}
	
		public MSG_$message.name (short sys, short comp#foreach( $field in $message.fields ), #getJavaType($field.type) $field.name #if($field.array)[]#end #end) {
			super(sys, comp, (short)$message.length, "$message.name");
#foreach( $field in $message.fields )
			this.$field.name = $field.name;
#end		
		}

		@Override
		public int getCRCExtra() {
			return $message.CRCExtra;
		}
	
#foreach( $field in $message.fields )
		public #getJavaType($field.type)#if($field.array)[]#end get#toTitleCase($field.name)() {
			return $field.name;
		}
		
		public void set#toTitleCase($field.name)(#getJavaType($field.type) $field.name#if($field.array)[]#end) {
			this.$field.name = $field.name;
		}
		
#end
			
		protected ByteBuffer decodePayload(ByteBuffer buffer) {
			msgName = "$message.name";
			
#foreach($field in $message.fields)
#if($field.array)
			for(int c=0; c<$field.length; ++c) {
#if($field.type.contains("float"))
				$field.name [c] = buffer.getFloat(); // $field.type
#elseif($field.type.contains("double"))
				$field.name [c] = buffer.getDouble(); // $field.type
#elseif($field.type.contains("8_") || $field.type.contains("char"))
				$field.name [c] =  (#getJavaType($field.type))buffer.get()#if(!$field.signed) & 0xff#end; // $field.type
#elseif($field.type.contains("16_"))
				$field.name [c] = buffer.getShort()#if(!$field.signed) & 0xffff#end; // $field.type
#elseif($field.type.contains("32_"))
				$field.name [c] = buffer.getInt()#if(!$field.signed) & 0xffffffff#end; // $field.type
#elseif($field.type.contains("64_"))
				$field.name [c] = buffer.getLong(); // $field.type
#end ## type
			}
			
#else
#if($field.type == "float")
			$field.name = buffer.getFloat(); // $field.type
#elseif($field.type == "double")
			$field.name = buffer.getDouble(); // $field.type
#elseif($field.type.contains("8_") || $field.type.contains("char"))
			$field.name = (#getJavaType($field.type))buffer.get()#if(!$field.signed) & 0xff#end; // $field.type
#elseif($field.type.contains("16_"))
			$field.name = buffer.getShort()#if(!$field.signed) & 0xffff#end; // $field.type
#elseif($field.type.contains("32_"))
			$field.name = buffer.getInt()#if(!$field.signed) & 0xffffffff#end; // $field.type
#elseif($field.type.contains("64_"))
			$field.name = buffer.getLong(); // $field.type
#end ## type
#end ## array	
#end ## foreach	
			return buffer;
		}
			
		public ByteBuffer encodePayload(ByteBuffer buffer) {
			
#foreach($field in $message.fields)
#if($field.array)
			for(int c=0; c<$field.length; ++c) {
#if($field.type.contains("float"))
				buffer.putFloat($field.name [c]); // $field.type
#elseif($field.type.contains("double"))
				buffer.putDouble($field.name [c]); // $field.type
#elseif($field.type.contains("8_") || $field.type.contains("char"))
				buffer.put((byte)($field.name [c]#if(!$field.signed) & 0xff#end));
#elseif($field.type.contains("16_"))
				buffer.putShort((short)($field.name [c]#if(!$field.signed) & 0xffff#end));
#elseif($field.type.contains("32_"))
				buffer.putInt((int)($field.name [c]#if(!$field.signed) & 0xffffffff)#end));
#elseif($field.type.contains("64_"))
				buffer.putLong((long)$field.name [c]);
#end ## type
			}
			
#else
#if($field.type == "float")
			buffer.putFloat($field.name); // $field.type
#elseif($field.type == "double")
			buffer.putDouble($field.name); // $field.type
#elseif($field.type.contains("8_") || $field.type.contains("char"))
			buffer.put((byte)($field.name#if(!$field.signed) & 0xff#end)); // $field.type
#elseif($field.type.contains("16_"))
			buffer.putShort((short)($field.name#if(!$field.signed) & 0xffff#end)); // $field.type
#elseif($field.type.contains("32_"))
			buffer.putInt((int)($field.name#if(!$field.signed) & 0xffffffff#end)); // $field.type
#elseif($field.type.contains("64_"))
			buffer.putLong($field.name); // $field.type
#end ## type
#end ## array	
#end ## foreach	
			return buffer;
		}
		
		@Override
		public String toString() {
			return "MSG_$message.name { #foreach($field in $message.fields)" + 
			"$field.name = " + $field.name + ", #end }";
		}
	}
#end

}